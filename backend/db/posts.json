[
  {
    "postId": "45889ea4-1156-44fc-bf3d-4ab863b4d49b",
    "title": "The Hooks of React Router",
    "description": "React Router 5 embraces the power of hooks and has introduced four different hooks to help with routing. You will find this article useful if you are looking for a quick primer on the new patterns of React Router. But before we look at hooks, we will start off with a new route rendering pattern.\n\nWhen using the component syntax, route props (match, location and history) are implicitly being passed on to the component. But it has to be changed to render once you have extra props to pass to the component. Note that adding an inline function to the component syntax would lead to the component re-mounting on every render.\n\nNote that there is no implicit passing of any props to the Home component. But without changing anything with the Route itself, you can add any extra props to the Home component. You can no longer make the mistake of re-mounting the component on every render and that’s the best kind of API.\n\nBut now route props are not being passed implicitly, so how do we access match, history or location? Do we have to wrap all components with withRouter? That is where the hooks steps in.",
    "url": "https://res.cloudinary.com/practicaldev/image/fetch/s--qa72YNaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/me6sbpz893h3a6ip5zsv.jpg",
    "author": "quynh",
    "createdAt": 1609513958297
  },
  {
    "postId": "3def6590-71c2-4563-9dd7-133706c9be33",
    "title": "How To Use .map() to Iterate Through Array Items in JavaScript",
    "description": "From the classic forloop to the forEach() method, various techniques and methods are used to iterate through datasets in JavaScript. One of the most popular methods is the .map() method. .map() creates an array from calling a specific function on each item in the parent array. .map() is a non-mutating method that creates a new array as opposed to mutating methods, which only make changes to the calling array.\n\nThis method can have many uses when working with arrays. In this tutorial, you’ll look at four noteworthy uses of .map() in JavaScript: calling a function of array elements, converting strings to arrays, rendering lists in JavaScript libraries, and reformatting array objects.",
    "url": "https://dustinstout.com/wp-content/uploads/2015/06/how-to-write-a-blog-1920x1080.jpg",
    "author": "quynh",
    "createdAt": 1609514028185
  },
  {
    "postId": "3ba88101-d849-42bd-b1f9-b8daf7aabde9",
    "title": "How to Build Forms in React with the react-hook-form Library",
    "description": "In this article, we will explore the react-hook-form library.\n\nYou will learn how to use and integrate this library with React. We'll also see why it's becoming a popular choice for building both simple and complex forms with added support for handling complex validations.",
    "url": "https://cdn-media-1.freecodecamp.org/images/1*QVTcnfXyMXivNu62IJ7JSg.jpeg",
    "author": "quynh",
    "createdAt": 1609514073566
  },
  {
    "postId": "1a431a07-3a0f-4e91-9e66-88956ad84570",
    "title": "7 Ways to Implement Conditional Rendering in React Applications",
    "description": "With React, we can build Single Page Applications that are dynamic and highly interactive. One way we fully utilize such interactivity is through conditional rendering.\n\nConditional rendering as a term describes the ability to render different UI markup based on certain conditions. In React-speak, it is a way to render different elements or components based on a condition. This concept is applied often in the following scenarios.\n\nIn this article, we examine seven(7) ways to implement such conditional rendering in React applications.",
    "url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ70h8cj-Z7LYOdAE5TzLFnb2KK4cG9NwPd3g&usqp=CAU",
    "author": "wynny",
    "createdAt": 1609514489066
  }
]
